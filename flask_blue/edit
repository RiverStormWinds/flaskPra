蓝图：构造程序的目录
    1，蓝图的作用是用来将flask项目进行扩展，将一个文件的内容进行分门别类，扩展到多个文件中
    2，直接使用views的__init__创建app也可以实现文件内容扩展，但是蓝图扩展的方式更加方便
       并且功能更加强大。
    3，蓝图可以避免相互导入的问题，因为不使用蓝图情况下，views下的各个文件会导入app进行app.route
       使用，而views的__init__文件会导入各个文件下的方法导致循环导包问题隐患
    4，蓝图可以使用url_prefix='/xxx'给所有的url加上前缀，不使用蓝图的那种方法不行
    5，蓝图可以使用template_folder='xxx'给模板重新指定查询路径
    6，蓝图可以使用请求中间件在蓝图中进行区分出来，@account.before_request，控制account蓝图的中间件请求抓取，
       只针对蓝图里面的url生效，不会影响全局的请求，非常实用
蓝图：进行多个应用程序的管理
    1，蓝图可以将多个app进行统一分类和统一管理

上下文管理：
    threading.local对象：用于为每个线程开辟一块空间来保存它独有的值

    源码(request)
        情况1：单进程单线程，基于全局变量做
        情况2：单进程多线程，基于threading.local对象做

    flask上下文详细请求过程：
        - threading.Local()和Flask自定义的Local对象
        - 请求到来时：
            - ctx = 封装完成的RequestContext(request, session)对象
            - ctx.push() 将RequestContext对象放入Flask自定义的Local对象中
        - 执行视图时：
            - 导入request
            - print(request)   -->  LocalProxy对象的__str__方法
            - request.method   -->  LocalProxy对象的__getattr__方法
            - request + 1      -->  LocalProxy对象的__add__方法
                ......等等
                - 本质就是LocalProxy对象的方法里面 request = LocalProxy(partial(_lookup_req_object, "request"))
                - 将partial(_lookup_req_object, "request")这个便函数传入到LocalProxy中的魔法方法__str__或__getattr__或__add__之中进行执行
                - _lookup_req_object就是从Local中拿到RequestContext对象，"request"就是从对象中取出请求相关的数据及信息
        - 执行结束
            - ctx.auto_pop(error) 将RequestContext对象从
            __storage__ =
                            {
                                ident唯一标识: {
                                                 "stack" : [封装完成的RequestContext对象]
                                              }
                            }
            stack.pop()

